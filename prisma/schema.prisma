generator client {
  provider      = "prisma-client-js"
  engineType    = "binary"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole {
  USER
  ADMIN
}

model User {
  id            String       @id @default(cuid())
  role          UserRole     @default(USER)
  //
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  //
  accounts      Account[]
  sessions      Session[]
  // 
  name          String
  email         String       @unique
  emailVerified Boolean      @default(false)
  firstName     String?
  lastName      String?
  avatarId      String?
  description   String?
  password      String
  file          File[]
  // 
  userDetails   UserDetails?
}

model UserDetails {
  id            String                      @id @default(cuid())
  userId        String                      @unique
  user          User                        @relation(fields: [userId], references: [id], onDelete: Cascade)
  company       UserDetailsOnCompany[]
  businessCards UserDetailsOnBusinessCard[]
  opinions      Opinion[]
  comment       Comment[]
}

model UserDetailsOnCompany {
  id            String      @id @default(cuid())
  // 
  userDetailsId String
  userDetails   UserDetails @relation(fields: [userDetailsId], references: [id], onDelete: Cascade)
  // 
  companyId     String
  company       Company     @relation(fields: [companyId], references: [id], onDelete: Cascade)
  //
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model UserDetailsOnBusinessCard {
  id             String       @id @default(cuid())
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  //
  userDetailsId  String
  userDetails    UserDetails  @relation(fields: [userDetailsId], references: [id], onDelete: Cascade)
  // 
  businessCardId String       @unique
  businessCard   BusinessCard @relation(fields: [businessCardId], references: [id], onDelete: Cascade)
}

model BusinessCardTheme {
  id   String  @id @default(cuid())
  name String
  code String
  url  String?
}

model BusinessCardConfig {
  id           String        @id @default(cuid())
  styles       Json?
  textElements TextElement[]
  front        BusinessCard? @relation("FrontConfig")
  back         BusinessCard? @relation("BackConfig")
}

model BusinessCard {
  id                  String                     @id @default(cuid())
  createdAt           DateTime                   @default(now())
  updatedAt           DateTime                   @updatedAt
  // 
  user                UserDetailsOnBusinessCard?
  frontId             String?                    @unique
  front               BusinessCardConfig?        @relation("FrontConfig", fields: [frontId], references: [id])
  backId              String?                    @unique
  back                BusinessCardConfig?        @relation("BackConfig", fields: [backId], references: [id])
  //
  generalStyles       Json?
  defaultTextElements TextElement[]
  //
  qrLink              String?
  //
  companyId           String?                    @unique
  company             Company?                   @relation(fields: [companyId], references: [id], onDelete: Cascade)
}

enum FontFamily {
  Poppins
  Roboto
}

enum FontWeight {
  light
  normal
  medium
  semibold
  bold
  black
}

enum TextDecoration {
  default
  underline
  line_through
}

enum TextAlign {
  left
  center
  right
  justify
}

model TextElement {
  id                   String              @id @default(cuid())
  code                 String?
  text                 String
  positionX            Int?
  positionY            Int?
  color                String?             @default("#333")
  fontSize             Int?                @default(12)
  fontFamily           FontFamily?         @default(Poppins)
  fontWeight           FontWeight?         @default(normal)
  fontStyle            String?
  textDecoration       TextDecoration?     @default(default)
  textAlign            TextAlign?          @default(center)
  lineHeight           Float?              @default(1.2)
  letterSpacing        Float?              @default(1.2)
  isHidden             Boolean?            @default(false)
  zIndex               Int?                @default(0)
  businessCardConfigId String?
  textElements         BusinessCardConfig? @relation(fields: [businessCardConfigId], references: [id], onDelete: Cascade)
  businessCardId       String?
  defaultTextElements  BusinessCard?       @relation(fields: [businessCardId], references: [id], onDelete: Cascade)
}

model File {
  id        String   @id @default(cuid())
  name      String
  url       String
  key       String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String?
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Company {
  id           String                 @id @default(cuid())
  createdAt    DateTime               @default(now())
  updatedAt    DateTime               @updatedAt
  //
  logoId       String?
  companyName  String?
  slug         String                 @unique
  ownerName    String?
  nip          String?
  regon        String?
  phoneNumber  String?
  email        String?
  website      String?
  addressLine1 String?
  addressLine2 String?
  city         String?
  state        String?
  postalCode   String?
  country      String?                @default("pl")
  isPublished  Boolean?               @default(true)
  //
  usersDetails UserDetailsOnCompany[]
  businessCard BusinessCard?
  companyPage  CompanyPage?
}

model FaqQuestion {
  id           String      @id @default(cuid())
  title        String
  content      String
  faqSectionId String?
  faqSection   FaqSection? @relation(fields: [faqSectionId], references: [id], onDelete: Cascade)
}

model FaqSection {
  id                   String              @id @default(cuid())
  title                String?
  items                FaqQuestion[]
  companyPageSectionId String?             @unique
  companyPageSection   CompanyPageSection? @relation(fields: [companyPageSectionId], references: [id], onDelete: Cascade)
}

model Opinion {
  id                String           @id @default(cuid())
  //
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  //
  content           String
  //
  userDetailsId     String
  userDetails       UserDetails      @relation(fields: [userDetailsId], references: [userId], onDelete: Cascade)
  // 
  opinionsSectionId String?
  opinionsSection   OpinionsSection? @relation(fields: [opinionsSectionId], references: [id], onDelete: Cascade)
}

model OpinionsSection {
  id                   String              @id @default(cuid())
  title                String?
  items                Opinion[]
  companyPageSectionId String?             @unique
  companyPageSection   CompanyPageSection? @relation(fields: [companyPageSectionId], references: [id], onDelete: Cascade)
}

model Comment {
  id                String           @id @default(cuid())
  //
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  //
  content           String
  //
  userDetailsId     String
  userDetails       UserDetails      @relation(fields: [userDetailsId], references: [id], onDelete: Cascade)
  //
  commentsSectionId String?
  commentsSection   CommentsSection? @relation(fields: [commentsSectionId], references: [id], onDelete: Cascade)
}

model CommentsSection {
  id                   String              @id @default(cuid())
  title                String?
  items                Comment[]
  companyPageSectionId String?             @unique
  companyPageSection   CompanyPageSection? @relation(fields: [companyPageSectionId], references: [id], onDelete: Cascade)
}

enum CompanyPageSectionTypes {
  faqSection
  opinionsSection
  commentsSection
}

model CompanyPageSection {
  id              String                  @id @default(cuid())
  sectionType     CompanyPageSectionTypes
  isVisible       Boolean                 @default(false)
  companyPageId   String
  companyPage     CompanyPage             @relation(fields: [companyPageId], references: [id], onDelete: Cascade)
  faqSection      FaqSection?
  opinionsSection OpinionsSection?
  commentsSection CommentsSection?
}

model CompanyPage {
  id          String               @id @default(cuid())
  slug        String               @unique
  description String?
  //
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  //
  company     Company              @relation(fields: [slug], references: [slug], onDelete: Cascade)
  sections    CompanyPageSection[]
}
