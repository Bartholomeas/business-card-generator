generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

enum UserRole {
  USER
  ADMIN
}

model User {
  id            String        @id @default(cuid())
  name          String
  email         String        @unique
  emailVerified DateTime?     

  firstName     String?
  lastName      String?

  avatarId      String?
  description   String?

  password      String
  role          UserRole      @default(USER)

  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt


  file          File[]        

  userDetails   UserDetails?

  accounts      Account[]
  sessions      Session[]

}

model UserDetails  {
  id            String          @id @default(cuid())
  
  userId        String          @unique
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  company       Company?
  cards         BusinessCard?
}

model BusinessCardTemplate { 
  id            String            @id @default(cuid())
  name          String
}

model BusinessCardConfig  {
  id              String          @id @default(cuid())
  styles          Json?

  textElements  TextElement[]

  front           BusinessCard?   @relation("FrontConfig")
  back            BusinessCard?   @relation("BackConfig")
}

model BusinessCard {
  id         String               @id @default(cuid())

  createdAt  DateTime             @default(now())
  updatedAt  DateTime?            @updatedAt

  userId     String               @unique
  user       UserDetails          @relation(fields: [userId], references: [userId], onDelete: Cascade)
  
  frontId    String?               @unique
  front      BusinessCardConfig?  @relation("FrontConfig", fields: [frontId], references: [id])

  backId     String?              @unique
  back       BusinessCardConfig?  @relation("BackConfig", fields: [backId], references: [id])

  generalStyles Json?

  qrLink     String?

  @@index([userId])
}

model TextElement { 
  id              String          @id @default(cuid())

  text            String

  alias           String?

  positionX       Int?
  positionY       Int?
  
  color           String?
  
  fontSize        Int?
  fontFamily      String?
  fontWeight      String?
  fontStyle       String?

  textDecoration  String?
  textAlign       String?
  lineHeight      Int?
  letterSpacing   Int?

  zIndex          Int?

  businessCardConfigId String?    
  textElements   BusinessCardConfig?     @relation(fields: [businessCardConfigId], references: [id],onDelete: Cascade)

  @@index([id])
  @@index([businessCardConfigId])
  
}

enum UploadStatus { 
  PENDING
  PROCESSING
  FAILED
  SUCCESS
}
model File {
  id            String         @id @default(cuid())
  name          String
  
  uploadStatus  UploadStatus   @default(PENDING)

  url           String
  key           String

  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  
  userId        String?        @unique
  user          User?          @relation(fields:[userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Company {
  id              String       @id @default(cuid())

  logoId          String?
  companyName     String?
  nip             String?
  regon           String?

  phoneNumber     String?
  email           String?
  website         String?

  addressLine1    String?
  addressLine2    String?
  city            String?
  state           String?
  postalCode      String?
  country         String?

  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  userId          String         @unique
  userDetails     UserDetails   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}